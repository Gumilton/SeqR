res
sum(res$padj <= 0.05)
sum(res$padj <= 0.05, na.rm = T)
setwd("C:/XIANGGU/DevDeploy/SeqR/test")
dat <- read.delim("../testSamples.txt")
dim(dat)
rownames(dat) <- dat[,1]
head(dat)
dat <- dat[,-1]
head(dat)
tail(dat)
dat <- cbind(dat,dat，dat)
tail(dat)
rownames(dat) <- make.unique(rownames(dat))
head(dat)
class(dat)
dat <- read.delim("../testSamples.txt", stringsAsFactors = F)
rownames(dat) <- dat[,1]
dat <- dat[,-1]
dat <- cbind(dat,dat，dat)
rownames(dat) <- make.unique(rownames(dat))
head(dat)
colnames(dat) <- make.unique(colnames(dat))
head(dat)
dim(colnames)
dim(dat)
length(seq(4,18,2))
dat <- read.delim("../testSamples.txt", stringsAsFactors = F)
rownames(dat) <- dat[,1]
dat <- dat[,-1]
dat <- cbind(dat,dat，dat,dat,dat,dat)
colnames(dat) <- make.unique(colnames(dat))
head(dat)
dim(dat)
length(seq(4,36,2))
result <- data.frame(non = rep(0,17),
para = rep(0,17))
result
seq(4,ncol(dat),2)
numSample <- seq(4,ncol(dat),2)
for(i in 1:length(numSample)) {
print(i)
}
for(i in 1:length(numSample)) {
ns <- numSample[i]
print(ns)
}
library(DESeq2)
sampleInfo <- t(dat[1:2,])
sampleInfo
class(sampleInfo)
sampleInfo <- as.data.frame(t(dat[1:2,]))
sampleInfo
colnames(sampleInfo) <- c("sample", "type")
sampleInfo$sample <- rownames(sampleInfo)
ncol(dat)
sampleInfo$type <- c(rep(c("T","N"),18)
)
sampleInfo
dat <- read.delim("../testSamples.txt", stringsAsFactors = F)
rownames(dat) <- dat[,1]
dat <- dat[,-1]
dim(dat)
22609*6
dat <- cbind(dat,dat + matrix(rnorm(135654), ncol = 6)，
dat + matrix(rnorm(135654), ncol = 6),
dat + matrix(rnorm(135654), ncol = 6),
dat + matrix(rnorm(135654), ncol = 6),
dat + matrix(rnorm(135654), ncol = 6))
colnames(dat) <- make.unique(colnames(dat))
result <- data.frame(non = rep(0,17),
para = rep(0,17))
numSample <- seq(4,ncol(dat),2)
sampleInfo <- as.data.frame(t(dat[1:2,]))
colnames(sampleInfo) <- c("sample", "type")
sampleInfo$sample <- rownames(sampleInfo)
sampleInfo$type <- c(rep(c("T","N"),18))
dds <- DESeq2::DESeqDataSetFromMatrix(dat, colData = sampleInfo, design = ~type)
dds <- DESeq2::DESeqDataSetFromMatrix(round(dat), colData = sampleInfo, design = ~type)
min(dat)
dat <- read.delim("../testSamples.txt", stringsAsFactors = F)
rownames(dat) <- dat[,1]
dat <- dat[,-1]
dat <- cbind(dat,dat + matrix(rnorm(135654, mean = 10), ncol = 6)，
dat + matrix(rnorm(135654, mean = 10), ncol = 6),
dat + matrix(rnorm(135654, mean = 10), ncol = 6),
dat + matrix(rnorm(135654, mean = 10), ncol = 6),
dat + matrix(rnorm(135654, mean = 10), ncol = 6))
colnames(dat) <- make.unique(colnames(dat))
dat <- dat - min(dat)
result <- data.frame(non = rep(0,17),
para = rep(0,17))
numSample <- seq(4,ncol(dat),2)
sampleInfo <- as.data.frame(t(dat[1:2,]))
colnames(sampleInfo) <- c("sample", "type")
sampleInfo$sample <- rownames(sampleInfo)
sampleInfo$type <- c(rep(c("T","N"),18))
library(DESeq2)
dds <- DESeq2::DESeqDataSetFromMatrix(round(dat), colData = sampleInfo, design = ~type)
ns
ns =4
temp <- dds[,1:ns]
temp
result
library(BiocParallel)
BiocParallel::SnowParam()
for(i in 1:length(numSample)) {
ns <- numSample[i]
print(ns)
temp <- dds[,1:ns]
t <- proc.time()
temp <- DESeq(temp, parallel = F)
temp2 <- DESeq2::results(temp,parallel = F)
result[i,1] <- proc.time() - t
t <- proc.time()
temp <- DESeq(temp, parallel =T)
temp2 <- DESeq2::results(temp,parallel = T)
result[i,2] <- proc.time() - t
}
proc.time() - t
proc.time() - t
proc.time() - t
dat <- read.delim("../testSamples.txt", stringsAsFactors = F)
rownames(dat) <- dat[,1]
dat <- dat[,-1]
dat <- cbind(dat,dat + matrix(rnorm(135654, mean = 10), ncol = 6)，
dat + matrix(rnorm(135654, mean = 10), ncol = 6),
dat + matrix(rnorm(135654, mean = 10), ncol = 6),
dat + matrix(rnorm(135654, mean = 10), ncol = 6),
dat + matrix(rnorm(135654, mean = 10), ncol = 6))
colnames(dat) <- make.unique(colnames(dat))
dat <- dat - min(dat)
result <- data.frame(non_usr = rep(0,17),
non_sys = rep(0,17),
non_elp = rep(0,17),
para_usr = rep(0,17),
para_sys = rep(0,17),
para_elp = rep(0,17))
numSample <- seq(4,ncol(dat),2)
sampleInfo <- as.data.frame(t(dat[1:2,]))
colnames(sampleInfo) <- c("sample", "type")
sampleInfo$sample <- rownames(sampleInfo)
sampleInfo$type <- c(rep(c("T","N"),18))
library(DESeq2)
library(BiocParallel)
BiocParallel::SnowParam()
dds <- DESeq2::DESeqDataSetFromMatrix(round(dat), colData = sampleInfo, design = ~type)
for(i in 1:length(numSample)) {
ns <- numSample[i]
print(ns)
temp <- dds[,1:ns]
t <- proc.time()
temp <- DESeq(temp, parallel = F)
temp2 <- DESeq2::results(temp,parallel = F)
result[i,1:3] <- proc.time() - t
t <- proc.time()
temp <- DESeq(temp, parallel =T)
temp2 <- DESeq2::results(temp,parallel = T)
result[i,4:6] <- proc.time() - t
}
result
t <- proc.time()
temp <- DESeq(temp, parallel = F)
temp2 <- DESeq2::results(temp,parallel = F)
proc.time() - t
plot(result[,1])
plot(result[,6])
plot(result[,6], lty = "l")
plot(result[,6],  "l")
plot(result[,6],  type ="l")
points(result[,3],  type ="l", col ="blue")
points(result[,3],  type ="b", col ="blue")
plot(result[,6],  type ="l", ylim = c(0,120))
points(result[,3],  type ="b", col ="blue")
dim(dat)
length(dat)
22609 * 36
dat <- cbind(dat + matrix(rnorm(813924, mean = 10), ncol = 6)，
dat + matrix(rnorm(813924, mean = 10), ncol = 6),
dat + matrix(rnorm(813924, mean = 10), ncol = 6),
dat + matrix(rnorm(813924, mean = 10), ncol = 6),
dat + matrix(rnorm(813924, mean = 10), ncol = 6))
dim(dat)
colnames(dat) <- make.unique(colnames(dat))
dat <- dat - min(dat)
seq(4,ncol(dat),10)
numSample <- seq(4,ncol(dat),10)
result <- data.frame(non_usr = rep(0,length(numSample)),
non_sys = rep(0,length(numSample)),
non_elp = rep(0,length(numSample)),
para_usr = rep(0,length(numSample)),
para_sys = rep(0,length(numSample)),
para_elp = rep(0,length(numSample)))
sampleInfo <- as.data.frame(t(dat[1:2,]))
colnames(sampleInfo) <- c("sample", "type")
sampleInfo$sample <- rownames(sampleInfo)
sampleInfo$type <- c(rep(c("T","N"),18))
library(DESeq2)
library(BiocParallel)
BiocParallel::SnowParam()
dds <- DESeq2::DESeqDataSetFromMatrix(round(dat), colData = sampleInfo, design = ~type)
for(i in 1:length(numSample)) {
ns <- numSample[i]
print(ns)
temp <- dds[,1:ns]
t <- proc.time()
temp <- DESeq(temp, parallel = F)
temp2 <- DESeq2::results(temp,parallel = F)
result[i,1:3] <- proc.time() - t
t <- proc.time()
temp <- DESeq(temp, parallel =T)
temp2 <- DESeq2::results(temp,parallel = T)
result[i,4:6] <- proc.time() - t
}
for(i in 1:length(numSample)) {
ns <- numSample[i]
print(ns)
temp <- dds[,1:ns]
t <- proc.time()
temp <- DESeq(temp, parallel = F)
temp2 <- DESeq2::results(temp,parallel = F)
result[i,1:3] <- proc.time() - t
temp <- dds[,1:ns]
t <- proc.time()
temp <- DESeq(temp, parallel =T)
temp2 <- DESeq2::results(temp,parallel = T)
result[i,4:6] <- proc.time() - t
}
dim(dat)
sampleInfo$type
dat[1:500, sampleInfo$type == "T"] <- dat[1:500, sampleInfo$type == "T"] + 100
dds <- DESeq2::DESeqDataSetFromMatrix(round(dat), colData = sampleInfo, design = ~type)
for(i in 1:length(numSample)) {
ns <- numSample[i]
print(ns)
temp <- dds[,1:ns]
t <- proc.time()
temp <- DESeq(temp, parallel = F)
temp2 <- DESeq2::results(temp,parallel = F)
result[i,1:3] <- proc.time() - t
temp <- dds[,1:ns]
t <- proc.time()
temp <- DESeq(temp, parallel =T)
temp2 <- DESeq2::results(temp,parallel = T)
result[i,4:6] <- proc.time() - t
}
dat <- read.delim("../testSamples.txt", stringsAsFactors = F)
rownames(dat) <- dat[,1]
dat <- dat[,-1]
dat <- cbind(dat,dat + matrix(rnorm(135654), ncol = 6)，
dat + matrix(rnorm(135654), ncol = 6),
dat + matrix(rnorm(135654), ncol = 6),
dat + matrix(rnorm(135654), ncol = 6),
dat + matrix(rnorm(135654), ncol = 6))
dat <- cbind(dat + matrix(rnorm(813924), ncol = 6)，
dat + matrix(rnorm(813924), ncol = 6),
dat + matrix(rnorm(813924), ncol = 6),
dat + matrix(rnorm(813924), ncol = 6),
dat + matrix(rnorm(813924), ncol = 6))
colnames(dat) <- make.unique(colnames(dat))
dat <- dat - min(dat)
numSample <- seq(4,ncol(dat),10)
result <- data.frame(non_usr = rep(0,length(numSample)),
non_sys = rep(0,length(numSample)),
non_elp = rep(0,length(numSample)),
para_usr = rep(0,length(numSample)),
para_sys = rep(0,length(numSample)),
para_elp = rep(0,length(numSample)))
sampleInfo <- as.data.frame(t(dat[1:2,]))
colnames(sampleInfo) <- c("sample", "type")
sampleInfo$sample <- rownames(sampleInfo)
sampleInfo$type <- c(rep(c("T","N"),18))
dat[1:500, sampleInfo$type == "T"] <- dat[1:500, sampleInfo$type == "T"] + 100
library(DESeq2)
library(BiocParallel)
BiocParallel::SnowParam()
dds <- DESeq2::DESeqDataSetFromMatrix(round(dat), colData = sampleInfo, design = ~type)
for(i in 1:length(numSample)) {
ns <- numSample[i]
print(ns)
temp <- dds[,1:ns]
t <- proc.time()
temp <- DESeq(temp, parallel = F)
temp2 <- DESeq2::results(temp,parallel = F)
result[i,1:3] <- proc.time() - t
temp <- dds[,1:ns]
t <- proc.time()
temp <- DESeq(temp, parallel =T)
temp2 <- DESeq2::results(temp,parallel = T)
result[i,4:6] <- proc.time() - t
}
plot(numSample, result[,6], ylim = c(0, max(result[,6])), type = "l")
points(numSample, result[,3], type = "l", col = "blue")
BiocInstaller::biocLite()
BiocInstaller::biocLite()
dat <- read.delim("../testSamples.txt", stringsAsFactors = F)
rownames(dat) <- dat[,1]
dat <- dat[,-1]
dat <- cbind(dat,dat + matrix(rnorm(135654), ncol = 6),
dat + matrix(rnorm(135654), ncol = 6),
dat + matrix(rnorm(135654), ncol = 6),
dat + matrix(rnorm(135654), ncol = 6),
dat + matrix(rnorm(135654), ncol = 6))
dat <- cbind(dat + matrix(rnorm(813924), ncol = 6),
dat + matrix(rnorm(813924), ncol = 6),
dat + matrix(rnorm(813924), ncol = 6),
dat + matrix(rnorm(813924), ncol = 6),
dat + matrix(rnorm(813924), ncol = 6))
colnames(dat) <- make.unique(colnames(dat))
dat <- dat - min(dat)
numSample <- seq(4,ncol(dat),10)
result <- data.frame(non_usr = rep(0,length(numSample)),
non_sys = rep(0,length(numSample)),
non_elp = rep(0,length(numSample)),
para_usr = rep(0,length(numSample)),
para_sys = rep(0,length(numSample)),
para_elp = rep(0,length(numSample)))
sampleInfo <- as.data.frame(t(dat[1:2,]))
colnames(sampleInfo) <- c("sample", "type")
sampleInfo$sample <- rownames(sampleInfo)
sampleInfo$type <- c(rep(c("T","N"),18))
dat[1:500, sampleInfo$type == "T"] <- dat[1:500, sampleInfo$type == "T"] + 100
library(DESeq2)
library(BiocParallel)
BiocParallel::SnowParam()
dds <- DESeq2::DESeqDataSetFromMatrix(round(dat), colData = sampleInfo, design = ~type)
for(i in 1:length(numSample)) {
ns <- numSample[i]
print(ns)
temp <- dds[,1:ns]
t <- proc.time()
temp <- DESeq(temp, parallel = F)
temp2 <- DESeq2::results(temp,parallel = F)
result[i,1:3] <- proc.time() - t
temp <- dds[,1:ns]
t <- proc.time()
temp <- DESeq(temp, parallel =T)
temp2 <- DESeq2::results(temp,parallel = T)
result[i,4:6] <- proc.time() - t
}
plot(numSample, result[,6], ylim = c(0, max(result[,6])), type = "l")
points(numSample, result[,3], type = "l", col = "blue")
BiocInstaller::biocLite("S4Vectors")
dat <- read.delim("../testSamples.txt", stringsAsFactors = F)
rownames(dat) <- dat[,1]
dat <- dat[,-1]
dat <- cbind(dat,dat + matrix(rnorm(135654), ncol = 6),
dat + matrix(rnorm(135654), ncol = 6),
dat + matrix(rnorm(135654), ncol = 6),
dat + matrix(rnorm(135654), ncol = 6),
dat + matrix(rnorm(135654), ncol = 6))
dat <- cbind(dat + matrix(rnorm(813924), ncol = 6),
dat + matrix(rnorm(813924), ncol = 6),
dat + matrix(rnorm(813924), ncol = 6),
dat + matrix(rnorm(813924), ncol = 6),
dat + matrix(rnorm(813924), ncol = 6))
colnames(dat) <- make.unique(colnames(dat))
dat <- dat - min(dat)
numSample <- seq(4,ncol(dat),10)
result <- data.frame(non_usr = rep(0,length(numSample)),
non_sys = rep(0,length(numSample)),
non_elp = rep(0,length(numSample)),
para_usr = rep(0,length(numSample)),
para_sys = rep(0,length(numSample)),
para_elp = rep(0,length(numSample)))
sampleInfo <- as.data.frame(t(dat[1:2,]))
colnames(sampleInfo) <- c("sample", "type")
sampleInfo$sample <- rownames(sampleInfo)
sampleInfo$type <- c(rep(c("T","N"),18))
dat[1:500, sampleInfo$type == "T"] <- dat[1:500, sampleInfo$type == "T"] + 100
library(DESeq2)
library(BiocParallel)
BiocParallel::SnowParam()
dds <- DESeq2::DESeqDataSetFromMatrix(round(dat), colData = sampleInfo, design = ~type)
for(i in 1:length(numSample)) {
ns <- numSample[i]
print(ns)
temp <- dds[,1:ns]
t <- proc.time()
temp <- DESeq(temp, parallel = F)
temp2 <- DESeq2::results(temp,parallel = F)
result[i,1:3] <- proc.time() - t
temp <- dds[,1:ns]
t <- proc.time()
temp <- DESeq(temp, parallel =T)
temp2 <- DESeq2::results(temp,parallel = T)
result[i,4:6] <- proc.time() - t
}
plot(numSample, result[,6], ylim = c(0, max(result[,6])), type = "l")
points(numSample, result[,3], type = "l", col = "blue")
BiocInstaller::biocLite("GenomicRanges")
dat <- read.delim("../testSamples.txt", stringsAsFactors = F)
rownames(dat) <- dat[,1]
dat <- dat[,-1]
dat <- cbind(dat,dat + matrix(rnorm(135654), ncol = 6),
dat + matrix(rnorm(135654), ncol = 6),
dat + matrix(rnorm(135654), ncol = 6),
dat + matrix(rnorm(135654), ncol = 6),
dat + matrix(rnorm(135654), ncol = 6))
dat <- cbind(dat + matrix(rnorm(813924), ncol = 6),
dat + matrix(rnorm(813924), ncol = 6),
dat + matrix(rnorm(813924), ncol = 6),
dat + matrix(rnorm(813924), ncol = 6),
dat + matrix(rnorm(813924), ncol = 6))
colnames(dat) <- make.unique(colnames(dat))
dat <- dat - min(dat)
numSample <- seq(4,ncol(dat),10)
result <- data.frame(non_usr = rep(0,length(numSample)),
non_sys = rep(0,length(numSample)),
non_elp = rep(0,length(numSample)),
para_usr = rep(0,length(numSample)),
para_sys = rep(0,length(numSample)),
para_elp = rep(0,length(numSample)))
sampleInfo <- as.data.frame(t(dat[1:2,]))
colnames(sampleInfo) <- c("sample", "type")
sampleInfo$sample <- rownames(sampleInfo)
sampleInfo$type <- c(rep(c("T","N"),18))
dat[1:500, sampleInfo$type == "T"] <- dat[1:500, sampleInfo$type == "T"] + 100
library(DESeq2)
library(BiocParallel)
BiocParallel::SnowParam()
dds <- DESeq2::DESeqDataSetFromMatrix(round(dat), colData = sampleInfo, design = ~type)
for(i in 1:length(numSample)) {
ns <- numSample[i]
print(ns)
temp <- dds[,1:ns]
t <- proc.time()
temp <- DESeq(temp, parallel = F)
temp2 <- DESeq2::results(temp,parallel = F)
result[i,1:3] <- proc.time() - t
temp <- dds[,1:ns]
t <- proc.time()
temp <- DESeq(temp, parallel =T)
temp2 <- DESeq2::results(temp,parallel = T)
result[i,4:6] <- proc.time() - t
}
plot(numSample, result[,6], ylim = c(0, max(result[,6])), type = "l")
points(numSample, result[,3], type = "l", col = "blue")
library(BiocInstaller)
biocLite("DESeq2")
dat <- read.delim("../testSamples.txt", stringsAsFactors = F)
rownames(dat) <- dat[,1]
dat <- dat[,-1]
dat <- cbind(dat,dat + matrix(rnorm(135654), ncol = 6),
dat + matrix(rnorm(135654), ncol = 6),
dat + matrix(rnorm(135654), ncol = 6),
dat + matrix(rnorm(135654), ncol = 6),
dat + matrix(rnorm(135654), ncol = 6))
dat <- cbind(dat + matrix(rnorm(813924), ncol = 6),
dat + matrix(rnorm(813924), ncol = 6),
dat + matrix(rnorm(813924), ncol = 6),
dat + matrix(rnorm(813924), ncol = 6),
dat + matrix(rnorm(813924), ncol = 6))
colnames(dat) <- make.unique(colnames(dat))
dat <- dat - min(dat)
numSample <- seq(4,ncol(dat),10)
result <- data.frame(non_usr = rep(0,length(numSample)),
non_sys = rep(0,length(numSample)),
non_elp = rep(0,length(numSample)),
para_usr = rep(0,length(numSample)),
para_sys = rep(0,length(numSample)),
para_elp = rep(0,length(numSample)))
sampleInfo <- as.data.frame(t(dat[1:2,]))
colnames(sampleInfo) <- c("sample", "type")
sampleInfo$sample <- rownames(sampleInfo)
sampleInfo$type <- c(rep(c("T","N"),18))
dat[1:500, sampleInfo$type == "T"] <- dat[1:500, sampleInfo$type == "T"] + 100
library(DESeq2)
library(BiocParallel)
BiocParallel::SnowParam()
dds <- DESeq2::DESeqDataSetFromMatrix(round(dat), colData = sampleInfo, design = ~type)
for(i in 1:length(numSample)) {
ns <- numSample[i]
print(ns)
temp <- dds[,1:ns]
t <- proc.time()
temp <- DESeq(temp, parallel = F)
temp2 <- DESeq2::results(temp,parallel = F)
result[i,1:3] <- proc.time() - t
temp <- dds[,1:ns]
t <- proc.time()
temp <- DESeq(temp, parallel =T)
temp2 <- DESeq2::results(temp,parallel = T)
result[i,4:6] <- proc.time() - t
}
plot(numSample, result[,6], ylim = c(0, max(result[,6])), type = "l")
points(numSample, result[,3], type = "l", col = "blue")
points(numSample, result[,3], type = "l", col = "blue", lty = 2)
plot(numSample, result[,6], ylim = c(0, max(result[,6])), type = "l")
points(numSample, result[,3], type = "l", col = "blue", lty = 2)
plot(numSample, result[,6], ylim = c(0, max(result[,6])), type = "l")
points(numSample, result[,4], type = "l", col = "black", lty = 2)
points(numSample, result[,5], type = "l", col = "black", lty = 3)
points(numSample, result[,1], type = "l", col = "blue")
points(numSample, result[,2], type = "l", col = "blue", lty = 2)
points(numSample, result[,3], type = "l", col = "blue", lty = 3)
head(result)
plot(numSample, result[,6], ylim = c(0, max(result[,6])), type = "l")
points(numSample, result[,4], type = "l", col = "black", lty = 2)
points(numSample, result[,5], type = "l", col = "black", lty = 3)
points(numSample, result[,3], type = "l", col = "blue")
points(numSample, result[,1], type = "l", col = "blue", lty = 2)
points(numSample, result[,2], type = "l", col = "blue", lty = 3)
result$numSample <- numSample
result
write.table(result, "Runtime Analysis.txt", sep = "\t", row.names = F, quote = F)
plot(numSample, result[,6], ylim = c(0, max(result[,6])), type = "l")
points(numSample, result[,4], type = "l", col = "black", lty = 2)
points(numSample, result[,5], type = "l", col = "black", lty = 3)
points(numSample, result[,3], type = "l", col = "blue")
points(numSample, result[,1], type = "l", col = "blue", lty = 2)
points(numSample, result[,2], type = "l", col = "blue", lty = 3)
