library(svd)
length(NULL)
plot("sss")
plot()
plot.new()
plot(0,0)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
controls <- c(1,2,3)
factor(1:6 %in% controls)
factor(1:6 %in% controls, labels = c("treat","control"))
factor(!1:6 %in% controls, labels = c("treat","control"))
factor(!1:6 %in% controls, labels = c("control","Case"))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?voom
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?DESeqDataSet
library(DESeq2)
t <- factor(c(rep("S",3),rep("D",3)))
t
data.frame(t)
data.frame(t, row.names = paste("SS",1:6,sep = "_"))
td <- data.frame(t, row.names = paste("SS",1:6,sep = "_"))
td
td$t
t
shiny::runApp()
shiny::runApp()
library(DESeq2)
deseq2 <- function(data, controls, filter) {
intType <- any(apply(data,2,typeof) != "integer")
if(intType) {
data[] <- lapply(data, as.integer)
}
condition <- factor(! colnames(data) %in% controls,
labels = c("Control","Case"))
colData <- data.frame(condition, row.names = colnames(data))
dds <- DESeq2::DESeqDataSet(countData = data,
colData = colData,
design = ~ condition)
dds <- DESeq2::DESeq(dds, parallel = T )
return(dds)
}
deseq2_de <- function(dds) {
res <- DESeq2::results(dds, parallel = T)
return(res)
}
data <- read.delim("./testSamples.txt", stringsAsFactors = F)
head(data)
controls <- colnames(data)[1:3]
dds <- deseq2(data, controls, T)
library(DESeq2)
deseq2 <- function(data, controls, filter) {
intType <- any(apply(data,2,typeof) != "integer")
if(intType) {
data[] <- lapply(data, as.integer)
}
condition <- factor(! colnames(data) %in% controls,
labels = c("Control","Case"))
info <- data.frame(condition, row.names = colnames(data))
dds <- DESeq2::DESeqDataSet(countData = data,
colData = info,
design = ~ condition)
dds <- DESeq2::DESeq(dds, parallel = T )
return(dds)
}
deseq2_de <- function(dds) {
res <- DESeq2::results(dds, parallel = T)
return(res)
}
dds <- deseq2(data, controls, T)
dds <- deseq2(data, controls, rep(T, nrow(data)))
library(DESeq2)
deseq2 <- function(data, controls, filter) {
intType <- any(apply(data,2,typeof) != "integer")
if(intType) {
data[] <- lapply(data, as.integer)
}
condition <- factor(! colnames(data) %in% controls,
labels = c("Control","Case"))
info <- data.frame(condition, row.names = colnames(data))
dds <- DESeq2::DESeqDataSetFromMatrix(countData = data,
colData = info,
design = ~ condition)
dds <- DESeq2::DESeq(dds, parallel = T )
return(dds)
}
deseq2_de <- function(dds) {
res <- DESeq2::results(dds, parallel = T)
return(res)
}
dds <- deseq2(data, controls, rep(T, nrow(data)))
head(data)
rownames(data) <- data[,1]
data <- data[,-1]
controls <- colnames(data)[1:3]
dds <- deseq2(data, controls, rep(T, nrow(data)))
res <- deseq2_de(dds)
res
head(as.data.frame(res))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
