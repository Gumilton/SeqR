shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
controls <- c(1,2,3)
factor(1:6 %in% controls)
factor(1:6 %in% controls, labels = c("treat","control"))
factor(!1:6 %in% controls, labels = c("treat","control"))
factor(!1:6 %in% controls, labels = c("control","Case"))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?voom
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?DESeqDataSet
library(DESeq2)
t <- factor(c(rep("S",3),rep("D",3)))
t
data.frame(t)
data.frame(t, row.names = paste("SS",1:6,sep = "_"))
td <- data.frame(t, row.names = paste("SS",1:6,sep = "_"))
td
td$t
t
shiny::runApp()
shiny::runApp()
library(DESeq2)
deseq2 <- function(data, controls, filter) {
intType <- any(apply(data,2,typeof) != "integer")
if(intType) {
data[] <- lapply(data, as.integer)
}
condition <- factor(! colnames(data) %in% controls,
labels = c("Control","Case"))
colData <- data.frame(condition, row.names = colnames(data))
dds <- DESeq2::DESeqDataSet(countData = data,
colData = colData,
design = ~ condition)
dds <- DESeq2::DESeq(dds, parallel = T )
return(dds)
}
deseq2_de <- function(dds) {
res <- DESeq2::results(dds, parallel = T)
return(res)
}
data <- read.delim("./testSamples.txt", stringsAsFactors = F)
head(data)
controls <- colnames(data)[1:3]
dds <- deseq2(data, controls, T)
library(DESeq2)
deseq2 <- function(data, controls, filter) {
intType <- any(apply(data,2,typeof) != "integer")
if(intType) {
data[] <- lapply(data, as.integer)
}
condition <- factor(! colnames(data) %in% controls,
labels = c("Control","Case"))
info <- data.frame(condition, row.names = colnames(data))
dds <- DESeq2::DESeqDataSet(countData = data,
colData = info,
design = ~ condition)
dds <- DESeq2::DESeq(dds, parallel = T )
return(dds)
}
deseq2_de <- function(dds) {
res <- DESeq2::results(dds, parallel = T)
return(res)
}
dds <- deseq2(data, controls, T)
dds <- deseq2(data, controls, rep(T, nrow(data)))
library(DESeq2)
deseq2 <- function(data, controls, filter) {
intType <- any(apply(data,2,typeof) != "integer")
if(intType) {
data[] <- lapply(data, as.integer)
}
condition <- factor(! colnames(data) %in% controls,
labels = c("Control","Case"))
info <- data.frame(condition, row.names = colnames(data))
dds <- DESeq2::DESeqDataSetFromMatrix(countData = data,
colData = info,
design = ~ condition)
dds <- DESeq2::DESeq(dds, parallel = T )
return(dds)
}
deseq2_de <- function(dds) {
res <- DESeq2::results(dds, parallel = T)
return(res)
}
dds <- deseq2(data, controls, rep(T, nrow(data)))
head(data)
rownames(data) <- data[,1]
data <- data[,-1]
controls <- colnames(data)[1:3]
dds <- deseq2(data, controls, rep(T, nrow(data)))
res <- deseq2_de(dds)
res
head(as.data.frame(res))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
res_list <- list()
res_list <- reactive()
res_list <- reactive({})
res_list()
print(res_list())
print(res_list
)
print(renderText(res_list()))
print(renderTable(res_list()))
shiny::runApp()
shiny::runApp()
shinyapps::deployApp()
library(BiocInstaller)
biocLite("GenomicRanges")
shinyapps::deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
list(c(0),c(-20,20))
shiny::runApp()
shiny::runApp()
shiny::runApp()
BiocParallel::register()
BiocParallel::multicoreWorkers()
SnowParam()
BiocParallel::MulticoreParam()
sys.call()
Sys.getenv()
Sys.info()
Sys.info()$sysname
Sys.info()$["sysname"]
Sys.info()["sysname"]
shiny::runApp()
na.omit(c("AA","SS",NA,NA))
as.character(na.omit(c("AA","SS",NA,NA)))
shiny::runApp()
shiny::runApp()
runApp(host="0.0.0.0",port=5050)
runApp(host="0.0.0.0",port=5050)
shiny::runApp()
shiny::runApp()
t <- read.delim("./Sample_aforTestPMLN.txt", stringsAsFactors = F)
head(t)
range(t[,-1])
max(t[,-1])
10e5
max(t[,-1]) > 10e5
2^20
2^12
2^15
log2(max(t[,-1]))
10^3
10e3
shiny::runApp()
shiny::runApp()
output
table_deseq
head(t)
rownames(t) <- t[,1]
t <- t[,-1]
head(t)
cds <- deseq(t, c("PM1", "PM2"), rep(T,nrow(t)))
cds
res <- deseq_de(cds)
res
head(res)
summary(res)
head(res)
head(as.data.frame(res))
temp <- as.data.frame(res)
temp <- cbind(ID= rownames(temp), temp)
head(temp)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
tl <- list(c(1,1,1,1),c(1,2,2,2,2))
tl
Reduce(intersect,tl)
Reduce(intersect,tl[1])
tl <- list(x = c(1,1,1,1), y = c(1,2,2,2,2), z = c(1, 2,3,3,3))
tl
subset(tl, c("x"))
tl[c("x",'y')]
shiny::runApp()
shinyapps::deployApp()
shiny::runApp()
library(xlsx)
shiny::runApp()
shinyapps::deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(shinyapps)
deployApp()
BiocInstaller::biocLite()
BiocInstaller::biocLite()
deployApp()
shinyapps::deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shinyapps::deployApp()
shiny::runApp()
shinyapps::deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
d <- read.xlsx("./Sample_aforTestPMLN.xlsx")
d <- read.xlsx("./Sample_aforTestPMLN.xlsx", sheetIndex = 1, header = T)
shiny::runApp()
shinyapps::deployApp()
d <- read.delim("./Sample_aforTestPMLN.txt", stringsAsFactors = F)
head(d)
d1 <- head(d)
d1
require(RJSONIO)
library(RJSONIO)
toJSON()
toJSON(list(a =1,b=2))
library(rjson)
toJSON(d1)
toJSON(t(d1))
toJSON(d1[,1])
d1
toJSON(d1)
toJSON(d1[,1])
d1[,1]
t(d1)[1,]
d1 <- rbind(colnames(d1), d1)
d1
toJSON(d1[,1])
shiny::runApp()
d1
d1 <- head(d)
d1
paste(d1$Gene,sep = "\n")
paste(d1$Gene,sep = "\n", collapse = T)
paste(d1$Gene,sep = "\n", collapse = "\n")
shiny::runApp()
shiny::runApp()
install.packages("shinyjs")
shiny::runApp()
install.packages("V8")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
doc <- tags$html(
tags$body(
a(href="http://www.lalala.com"))
)
cat(as.character(doc))
doc
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?a
shiny::runApp()
shiny::runApp()
shiny::runApp()
output$DAVID_link <- "ss"
library(shiny)
runApp(
list(ui = fluidPage(
selectInput('website', 'Choose a website'
, list(bbc = "http://www.bbc.co.uk"
, google = "http://www.google.com"
, cnn = "http://www.cnn.com")
)
, htmlOutput("mySite")
)
,server = function(input, output, session){
output$mySite <- renderUI({
tags$a(href = input$website, input$website)
})
})
)
library(shiny)
runApp(
list(ui = fluidPage(
selectInput('website', 'Choose a website'
, list(bbc = "http://www.bbc.co.uk"
, google = "http://www.google.com"
, cnn = "http://www.cnn.com")
)
, htmlOutput("mySite")
)
,server = function(input, output, session){
output$mySite <- renderUI({
tags$a(href = input$website, "website")
})
})
)
library(shiny)
runApp(
list(ui = fluidPage(
selectInput('website', 'Choose a website',
list(bbc = "http://www.bbc.co.uk",
google = "http://www.google.com",
cnn = "http://www.cnn.com")
)
#     ,
#
#
#
#     htmlOutput("mySite")
)
,server = function(input, output, session){
output$mySite <- renderUI({
tags$a(href = input$website, input$website)
})
})
)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
x <- c(0.51227981 , 0.48755732 ,-0.50308898, -0.49674816, -0.69757591,  0.71482435, -0.04227863,  0.02503020)
x
range(x)
range(x) * c(-1.2, 1.2)
range(x) * 1.2
shiny::runApp()
shiny::runApp()
library(scales)
alpha(ifelse(colnames(data) %in% controls,"red","blue"), .5)
alpha("red")
"red"
alpha("red", .5)
shiny::runApp()
shiny::runApp()
shiny::runApp()
?
nearPoints
shiny::runApp()
mtcars
?brushedPoints
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shinyapps::deployApp()
library(V8)
shinyapps::deployApp()
t <- read.delim("./Sample_aforTestPMLN.txt")
t
rownames(t) <- t$Gene
t <- t[,1]
t <- read.delim("./Sample_aforTestPMLN.txt")
rownames(t) <- t$Gene
t <- t[,-1]
head(t)
d <- dist(t(t))
d
c <- hclust(d)
c
plot(c)
hr <- hclust(as.dist(1-cor(t(t), method="pearson")), method="complete")
hr <- hclust(as.dist(1-cor((t), method="pearson")), method="complete")
plot(hr)
plot(hr, col = as.numeric(factor(colnames(t) %in% c("LN1","LN2"))))
as.numeric(factor(colnames(t) %in% c("LN1","LN2")))
as.dendrogram(hc)
as.dendrogram(hr)
d <- as.dendrogram(hr)
d
d = color_labels(hclust1,4,col=as.numeric(factor(colnames(t) %in% c("LN1","LN2"))))
labels_colors(d) = as.numeric(factor(colnames(t) %in% c("LN1","LN2")))
library(dendextend)
install.packages("dendextend")
library(dendextend)
labels_colors(d) = as.numeric(factor(colnames(t) %in% c("LN1","LN2")))
plot(d)
plot(d, main = "Hcluster")
shiny::runApp()
shiny::runApp()
t
d
cor(t)
cor(scale(t))
cor(t(scale(t(t))))
re <- head(t)
re
cor(re)
cor(scale(re))
cor(t(scale(t(re))))
re
t(scale(t(re)))
re <- head(t,100)
cor(re)
cor(t(scale(t(re))))
t(scale(t(re)))
re
re <- re[rowMeans(re) > 100,]
re
cor(re)
cor(t(scale(t(re))))
shiny::runApp()
library(gplots)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?
column
shiny::runApp()
shiny::runApp()
install.packages("ggvis")
library(ggvis)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?renderPlot
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
png()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?textInput
shiny::runApp()
?checkboxInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
?numericInput
?heatmap.2
shiny::runApp()
shiny::runApp()
shinyapps::deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shinyapps::deployApp()
