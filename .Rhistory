library(svd)
length(NULL)
plot("sss")
plot()
plot.new()
plot(0,0)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
controls <- c(1,2,3)
factor(1:6 %in% controls)
factor(1:6 %in% controls, labels = c("treat","control"))
factor(!1:6 %in% controls, labels = c("treat","control"))
factor(!1:6 %in% controls, labels = c("control","Case"))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?voom
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?DESeqDataSet
library(DESeq2)
t <- factor(c(rep("S",3),rep("D",3)))
t
data.frame(t)
data.frame(t, row.names = paste("SS",1:6,sep = "_"))
td <- data.frame(t, row.names = paste("SS",1:6,sep = "_"))
td
td$t
t
shiny::runApp()
shiny::runApp()
library(DESeq2)
deseq2 <- function(data, controls, filter) {
intType <- any(apply(data,2,typeof) != "integer")
if(intType) {
data[] <- lapply(data, as.integer)
}
condition <- factor(! colnames(data) %in% controls,
labels = c("Control","Case"))
colData <- data.frame(condition, row.names = colnames(data))
dds <- DESeq2::DESeqDataSet(countData = data,
colData = colData,
design = ~ condition)
dds <- DESeq2::DESeq(dds, parallel = T )
return(dds)
}
deseq2_de <- function(dds) {
res <- DESeq2::results(dds, parallel = T)
return(res)
}
data <- read.delim("./testSamples.txt", stringsAsFactors = F)
head(data)
controls <- colnames(data)[1:3]
dds <- deseq2(data, controls, T)
library(DESeq2)
deseq2 <- function(data, controls, filter) {
intType <- any(apply(data,2,typeof) != "integer")
if(intType) {
data[] <- lapply(data, as.integer)
}
condition <- factor(! colnames(data) %in% controls,
labels = c("Control","Case"))
info <- data.frame(condition, row.names = colnames(data))
dds <- DESeq2::DESeqDataSet(countData = data,
colData = info,
design = ~ condition)
dds <- DESeq2::DESeq(dds, parallel = T )
return(dds)
}
deseq2_de <- function(dds) {
res <- DESeq2::results(dds, parallel = T)
return(res)
}
dds <- deseq2(data, controls, T)
dds <- deseq2(data, controls, rep(T, nrow(data)))
library(DESeq2)
deseq2 <- function(data, controls, filter) {
intType <- any(apply(data,2,typeof) != "integer")
if(intType) {
data[] <- lapply(data, as.integer)
}
condition <- factor(! colnames(data) %in% controls,
labels = c("Control","Case"))
info <- data.frame(condition, row.names = colnames(data))
dds <- DESeq2::DESeqDataSetFromMatrix(countData = data,
colData = info,
design = ~ condition)
dds <- DESeq2::DESeq(dds, parallel = T )
return(dds)
}
deseq2_de <- function(dds) {
res <- DESeq2::results(dds, parallel = T)
return(res)
}
dds <- deseq2(data, controls, rep(T, nrow(data)))
head(data)
rownames(data) <- data[,1]
data <- data[,-1]
controls <- colnames(data)[1:3]
dds <- deseq2(data, controls, rep(T, nrow(data)))
res <- deseq2_de(dds)
res
head(as.data.frame(res))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
res_list <- list()
res_list <- reactive()
res_list <- reactive({})
res_list()
print(res_list())
print(res_list
)
print(renderText(res_list()))
print(renderTable(res_list()))
shiny::runApp()
shiny::runApp()
shinyapps::deployApp()
library(BiocInstaller)
biocLite("GenomicRanges")
shinyapps::deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
list(c(0),c(-20,20))
shiny::runApp()
shiny::runApp()
shiny::runApp()
BiocParallel::register()
BiocParallel::multicoreWorkers()
SnowParam()
BiocParallel::MulticoreParam()
sys.call()
Sys.getenv()
Sys.info()
Sys.info()$sysname
Sys.info()$["sysname"]
Sys.info()["sysname"]
shiny::runApp()
na.omit(c("AA","SS",NA,NA))
as.character(na.omit(c("AA","SS",NA,NA)))
shiny::runApp()
shiny::runApp()
runApp(host="0.0.0.0",port=5050)
runApp(host="0.0.0.0",port=5050)
shiny::runApp()
shiny::runApp()
t <- read.delim("./Sample_aforTestPMLN.txt", stringsAsFactors = F)
head(t)
range(t[,-1])
max(t[,-1])
10e5
max(t[,-1]) > 10e5
2^20
2^12
2^15
log2(max(t[,-1]))
10^3
10e3
shiny::runApp()
shiny::runApp()
output
table_deseq
head(t)
rownames(t) <- t[,1]
t <- t[,-1]
head(t)
cds <- deseq(t, c("PM1", "PM2"), rep(T,nrow(t)))
cds
res <- deseq_de(cds)
res
head(res)
summary(res)
head(res)
head(as.data.frame(res))
temp <- as.data.frame(res)
temp <- cbind(ID= rownames(temp), temp)
head(temp)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
tl <- list(c(1,1,1,1),c(1,2,2,2,2))
tl
Reduce(intersect,tl)
Reduce(intersect,tl[1])
tl <- list(x = c(1,1,1,1), y = c(1,2,2,2,2), z = c(1, 2,3,3,3))
tl
subset(tl, c("x"))
tl[c("x",'y')]
shiny::runApp()
shinyapps::deployApp()
shiny::runApp()
library(xlsx)
shiny::runApp()
shinyapps::deployApp()
